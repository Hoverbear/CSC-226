#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Assignment 3 - Theory
\end_layout

\begin_layout Author
Andrew Hobden (V00788452)
\end_layout

\begin_layout Section
Minimum Spanning vs Shortest Path Tree
\end_layout

\begin_layout Standard
Dijkstra's Single Source Shortest Path problem produces a Shortest Path
 Tree.
 Compare the Shortest Path Tree to the Minimum Weight Spanning Tree on the
 graph below.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename mst spt.svg
	width 90text%

\end_inset


\end_layout

\begin_layout Standard
The resulting Miniumum Weight Spanning Tree has 
\begin_inset Formula $weight=32$
\end_inset

, while the resulting Shortest Path Tree has 
\begin_inset Formula $weight=36$
\end_inset

.
 Therefore the Shortest Path Tree produced by Dijkstra's Since Source Path
 problem is not necessarily the Minimum Weight Spanning Tree.
\end_layout

\begin_layout Section
Dijksta Correctness
\end_layout

\begin_layout Standard
We'll use the following assumptions:
\end_layout

\begin_layout Itemize
We know that Dijkstra's works on Undirected Graphs.
 
\emph on
(Ulrike explicitly said this was allowed)
\end_layout

\begin_layout Itemize
Any directed graph 
\begin_inset Formula $D_{a}$
\end_inset

 can be seen as a subset of the undirected graph 
\begin_inset Formula $U_{a}$
\end_inset

.
 This is because an undirected graph can be transformed into a directed
 graph with each undirected edge 
\begin_inset Formula $e_{a}$
\end_inset

 being replaced by pair of oppositely pointing directed edges 
\begin_inset Formula $\{e_{b},e_{c}\}$
\end_inset

.
\end_layout

\begin_layout Itemize
Dijkstra's Algorithm always pulls in the lowest cost edge into it's set
 that doesn't connect to an already scanned node.
 It cannot select edges from outside of the set travelling into the set,
 only outgoing edges.
\end_layout

\begin_layout Standard
We'll make the following observations based on this:
\end_layout

\begin_layout Itemize
Optimal Substructure: A subpath of any shortest path is itself a shortest
 path.
\end_layout

\begin_layout Itemize
Triangle Inequality: If 
\begin_inset Formula $\delta(u,v)$
\end_inset

 is the shortest path from 
\begin_inset Formula $u$
\end_inset

 to 
\begin_inset Formula $v$
\end_inset

, then 
\begin_inset Formula $\delta(u,v)\leq\delta(u,x)+\delta(x,v)$
\end_inset

 for some 
\begin_inset Formula $x$
\end_inset

 in the graph.
\end_layout

\begin_layout Itemize
No Cycles in Shortest Path: There are no cycles in shortest path
\begin_inset Formula $p$
\end_inset

, otherwise two edges may be removed from 
\begin_inset Formula $p$
\end_inset

 and it will result in a path with the same source and destination, but
 a lower cost.
\end_layout

\begin_layout Itemize
No Backtracking: Since there are no cycles, 
\begin_inset Formula $p$
\end_inset

 contains only edges 
\begin_inset Formula $E_{P}=e_{0},...,e_{i-1},e_{i}\in p$
\end_inset

 travelling in one 'direction'.
 That is, there be cannot a part of 
\begin_inset Formula $P_{D}$
\end_inset

 which requires the algorithm backtrack, since this would result in a cycle
 between 
\begin_inset Formula $e_{\{j,k\}}$
\end_inset

 and 
\begin_inset Formula $e_{\{g,h\}}$
\end_inset

.
\end_layout

\begin_layout Description
Theorem: (For a directed graph) If Dijksta's algorithm draws a vertex into
 it's set, that the shortest path to that vertex has been found.
\end_layout

\begin_layout Description
Proof: Contradiction.
 Let
\begin_inset Formula $\delta(a,k)$
\end_inset

 be the path such that such that
\begin_inset Formula $\delta(a,b)+\delta(b,k)\leq\delta(a,c)+\delta(c,k)$
\end_inset

, where the vertices in
\begin_inset Formula $\delta(a,b)$
\end_inset

 and 
\begin_inset Formula $k$
\end_inset

 are already in the set, but some 
\begin_inset Formula $c$
\end_inset

 is not.
 This means that that 
\begin_inset Formula $\delta(a,b)$
\end_inset

 must be of less weight than 
\begin_inset Formula $\delta(a,c)$
\end_inset

, however Dijkstra's algorithm would have selected
\begin_inset Formula $\delta(b,k)$
\end_inset

 to pull 
\begin_inset Formula $k$
\end_inset

 into the set instead of
\begin_inset Formula $\delta(c,k)$
\end_inset

 only if the total distance to 
\begin_inset Formula $k$
\end_inset

 would have been less for 
\begin_inset Formula $\delta(a,k)$
\end_inset

.
\end_layout

\begin_layout Description
Theorem: Dijkstra's algorithm will not use an undirected edge more than
 once.
\end_layout

\begin_layout Description
Proof: Any shortest path cannot contain cycles, this also means it cannot
 backtrack.
 If there was a shortest path with a cycle or backtracking, it could not
 be a shortest path, since it could be simplified.
\end_layout

\begin_layout Standard
It follows from the above theorems, as well as the obervations, that Dijkstra's
 Algorithm will perform correctly on Directed Graphs so long as it is only
 permitted to select edges originating from it's set travelling outward.
\end_layout

\begin_layout Section
Shortest Paths to a Vertex Pseudocode
\end_layout

\begin_layout Standard
This 
\begin_inset Quotes eld
\end_inset

Single Destination Shortest Path
\begin_inset Quotes erd
\end_inset

 problem can be solved by simply performing Dijkstra's 
\begin_inset Quotes eld
\end_inset

Single Source Shortest Path
\begin_inset Quotes erd
\end_inset

 problem and reversing the determined paths.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "dijkstra.pseudocode"
lstparams "breaklines=true,captionpos=b,frame=tb,numbers=left"

\end_inset


\end_layout

\begin_layout Section
Shortest Path Algorithm
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
http://stackoverflow.com/questions/20317655/modified-breadth-first-search-edge-we
ights-2-3-or-5
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The shortest path between vertices 
\begin_inset Formula $A,B$
\end_inset

 in a direct graph 
\begin_inset Formula $G=\{V,E\}$
\end_inset

 with only edges of weight 1 can be determined in 
\begin_inset Formula $O(V+E)$
\end_inset

 time using a Breadth First Search.
 With a graph containing only edges of weights 1 and 2, it's possible to
 maintain this behaivor by having 
\begin_inset Quotes eld
\end_inset

imaginary
\begin_inset Quotes erd
\end_inset

 vertices with two weight 1 edges connecting in place of the weight 2 edge.
 Since the number of edges of weight two will always be less than 
\begin_inset Formula $E$
\end_inset

, the algorithm maintains a 
\begin_inset Formula $O(V+E)$
\end_inset

 time.
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename bfs.svg
	width 90text%

\end_inset


\end_layout

\begin_layout Standard
The following pseudocode demonstrates this application.
 Note how in the traceback the imaginary nodes are not added to any paths
 outputted.
\end_layout

\begin_layout Standard
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "bfs.pseudocode"
lstparams "breaklines=true,captionpos=b,frame=tb,numbers=left"

\end_inset


\end_layout

\begin_layout Section
Application Areas
\end_layout

\begin_layout Enumerate
Logistics and shipping.
 Dijksta's algorithm is can be utilized by logistics companies to plan packages
 routes and optimize shipping.
 For example, if a graph where each vertex is a depot, and edges are weighted
 according to the distance and/or cost to move items to that depot from
 others, Dijkstra's can be used to find the shortest or cheapest path to
 move the item along.
\end_layout

\begin_layout Enumerate
Geographic Information System.
 For an application like Google Maps, which produces directions between
 points A and B, Dijkstra's can be used to determine the optimal path along
 roads or other methods of transit like ferries, buses, or freeways.
 In this case, edge weights do not necessarily represent the distance travelled,
 but might be weighted based on a number of factors, including traffic and
 weather warnings.
\end_layout

\begin_layout Enumerate
Network Routing.
 In order to determine the optimal route for packets within a communications
 network Dijkstra's algorithm can be used, in this case edge weights might
 be determined by the link rate between routers.
\end_layout

\end_body
\end_document
